import pandas as pd
apps_with_duplicates = pd.read_csv("/Users/zaina/OneDrive/Desktop/hackathon dataset/datasets/apps.csv")
apps = apps_with_duplicates.drop_duplicates()
print('Total number of apps in thae dataset = ', apps.shape[0])
print(apps.info())
n = 5
apps.sample(n)

chars_to_remove = [',' ,'$' ,'+']
cols_to_clean = ["Installs","Price"]
for col in cols_to_clean:
    # Replace each character with an empty string
    for char in chars_to_remove:
        apps[col] = apps[col].astype(str).str.replace(char, '')
    # Convert col to numeric
    apps[col] = pd.to_numeric(apps[col])
import plotly
plotly.offline.init_notebook_mode(connected=True)
import plotly.graph_objs as go
num_categories = len(apps["Category"].unique())
print('Number of categories = ', num_categories)
num_apps_in_category = apps["Category"].value_counts().sort_values(ascending = False)
data = [go.Bar(
        x = num_apps_in_category.index, # index = category name
        y = num_apps_in_category.values, # value = count
)]
plotly.offline.iplot(data)
avg_app_rating = apps["Rating"].mean()
print('Average app rating = ', avg_app_rating)
data = [go.Histogram(
        x = apps['Rating']
)]
layout = {'shapes': [{
              'type' :'line',
              'x0': avg_app_rating,
              'y0': 0,
              'x1': avg_app_rating,
              'y1': 1000,
              'line': { 'dash': 'dashdot'}
          }]
          }
plotly.offline.iplot({'data': data, 'layout': layout})
%matplotlib inline
import seaborn as sns
sns.set_style("darkgrid")
import warnings
warnings.filterwarnings("ignore")
apps_with_size_and_rating_present = apps[(~apps["Rating"].isnull()) & (~apps["Size"].isnull())]
large_categories = apps_with_size_and_rating_present.groupby("Category").filter(lambda x: len(x) >= 250).reset_index()
plt1 = sns.jointplot(x = large_categories["Rating"], y = large_categories["Size"], kind = 'hex')
paid_apps = apps_with_size_and_rating_present[apps_with_size_and_rating_present["Type"] == "Paid"]
plt2 = sns.jointplot(x = paid_apps["Price"], y = paid_apps["Rating"])
import matplotlib.pyplot as plt
import seaborn as sns

fig, ax = plt.subplots()
fig.set_size_inches(15, 8)
popular_app_cats = apps[apps.Category.isin(['GAME', 'FAMILY', 'PHOTOGRAPHY',
                                            'MEDICAL', 'TOOLS', 'FINANCE',
                                            'LIFESTYLE','BUSINESS'])]
ax = sns.stripplot(x = popular_app_cats["Price"], y = popular_app_cats["Category"], jitter=True, linewidth=1)
ax.set_title('App pricing trend across categories')
apps_above_200 = popular_app_cats[['Category', 'App', 'Price']][popular_app_cats["Price"] > 200]
apps_above_200
apps_under_100 = popular_app_cats[popular_app_cats["Price"]<100]
fig, ax = plt.subplots()
fig.set_size_inches(15, 8)
ax = sns.stripplot(x=apps_under_100["Price"], y=apps_under_100["Category"], data=apps_under_100,
                   jitter=True, linewidth=1)
ax.set_title('App pricing trend across categories after filtering for junk apps')
trace0 = go.Box(
    # Data for paid apps
    y=apps[apps['Type'] == "Paid"]['Installs'],
    name = 'Paid'
)
trace1 = go.Box(
    # Data for free apps
    y=apps[apps['Type'] == "Free"]['Installs'],
    name = 'Free'
)
layout = go.Layout(
    title = "Number of downloads of paid apps vs. free apps",
    yaxis = dict(
        type = 'log',
        autorange = True
    )
)
data = [trace0,trace1]
plotly.offline.iplot({'data': data, 'layout': layout})
reviews_df = pd.read_csv("/Users/zaina/OneDrive/Desktop/hackathon dataset/datasets/user_reviews.csv")
merged_df = pd.merge(apps, reviews_df, on = "App", how = "inner")
merged_df = merged_df.dropna(subset=['Sentiment', 'Translated_Review'])
sns.set_style('ticks')
fig, ax = plt.subplots()
fig.set_size_inches(11, 8)
ax = sns.boxplot(x = "Type", y = "Sentiment_Polarity", data = merged_df)
ax.set_title('Sentiment Polarity Distribution')
reviews_df=reviews_df.dropna()
reviews_df
reviews_df["Sentiment"].hist(bins=3)
reviews_df[reviews_df["Sentiment"]=="Positive"]["Translated_Review"].head(10)
import nltk
# Download required NLTK data
nltk.download('punkt_tab')
nltk.download('stopwords')

from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator
from nltk.tokenize import word_tokenize
import string
from nltk.corpus import stopwords
import matplotlib.pyplot as plt

text = " ".join(reviews_df[reviews_df["Sentiment"]=="Positive"]["Translated_Review"])
tokens = word_tokenize(text)
tokens = [w.lower() for w in tokens]
table = str.maketrans('', '', string.punctuation)
stripped = [w.translate(table) for w in tokens]
words = [word for word in stripped if word.isalpha()]
stop_words = set(stopwords.words('english'))
words = [w for w in words if not w in stop_words]
wordcloud = WordCloud().generate(" ".join(words))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.show()
reviews_df[reviews_df["Sentiment"]=="Neutral"]["Translated_Review"].head(10)
from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator
from nltk.tokenize import word_tokenize
text = " ".join(reviews_df[reviews_df["Sentiment"]=="Neutral"]["Translated_Review"])
tokens = word_tokenize(text)
tokens = [w.lower() for w in tokens]
import string
table = str.maketrans('', '', string.punctuation)
stripped = [w.translate(table) for w in tokens]
words = [word for word in stripped if word.isalpha()]
from nltk.corpus import stopwords
stop_words = set(stopwords.words('english'))
words = [w for w in words if not w in stop_words]
wordcloud = WordCloud().generate(" ".join(words))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.show()
reviews_df[reviews_df["Sentiment"]=="Negative"]["Translated_Review"].head(10)
from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator
from nltk.tokenize import word_tokenize
text = " ".join(reviews_df[reviews_df["Sentiment"]=="Negative"]["Translated_Review"])
tokens = word_tokenize(text)
tokens = [w.lower() for w in tokens]
import string
table = str.maketrans('', '', string.punctuation)
stripped = [w.translate(table) for w in tokens]
words = [word for word in stripped if word.isalpha()]
from nltk.corpus import stopwords
stop_words = set(stopwords.words('english'))
words = [w for w in words if not w in stop_words]
wordcloud = WordCloud().generate(" ".join(words))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.show()
